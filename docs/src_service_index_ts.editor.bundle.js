"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_sinm_monaco_plantuml"] = self["webpackChunk_sinm_monaco_plantuml"] || []).push([["src_service_index_ts"],{

/***/ "./src/parser/grammar.ts":
/*!*******************************!*\
  !*** ./src/parser/grammar.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ohm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ohm-js */ \"./node_modules/ohm-js/dist/ohm.esm.js\");\n\nconst def = String.raw `\n  PlantUMLPreprocessor {\n    Root = Statement*\n\n    Statement =\n      | variableDeclaration\n      | DefineStatement\n      | DefineLongStatement\n      | IncludeStatement\n      | InlineFunctionDeclaration\n      | FunctionDeclaration\n      | ProcedureDeclaration\n      | IfStatement\n      | WhileStatement\n      | ReturnStatement\n      | ThemeStatement\n      | ExpressionStatement\n      | UnknownStatement\n      | UMLSpriteStatement\n      | umlStatement\n\n    assign = \"?=\" | \"=\"\n    variableDeclaration = \"!\" globalVar? identifier wsAroundOptional<assign> expression &le\n    globalVar =\n      | \"global\" ws+ -- global\n      | \"local\" ws+ -- local\n\n    /* ------------- Function & Procedure ------------ */\n    InlineFunctionDeclaration = functionStart identifier  Arguments? \"return\" expression &le\n    FunctionDeclaration = functionStart identifier Arguments? Statement* endToken<\"function\">\n    ProcedureDeclaration = procedureStart identifier Arguments? Statement* endToken<\"procedure\">\n    functionStart =\n      | \"!function\" -- normal\n      | \"!unquoted function\" -- unquoted\n    procedureStart =\n      | \"!procedure\" -- normal\n      | \"!unquoted procedure\" -- unquoted\n\n    endToken<x> = \"!end\" ws* x\n\n    Arguments = \"(\" ListOf<Argument, \",\"> \")\"\n    Argument = identifier (\"=\" expression)?\n\n    IncludeStatement = includeToken includePath #includePart?\n    includeToken =\n      | \"!includeurl\"\n      | \"!includesub\"\n      | \"!include\"\n\n    includePath =\n      | \"<\" pathChars \">\" -- std\n      | pathChars  -- normal\n    pathChars = pathChar+\n    includePart = \"!\" identifier\n    pathChar = letter | digit | \".\" | \"/\" | \":\" | \"_\" | \"-\"\n\n    DefineStatement = #\"!define \" identifier Arguments? #defineContent\n    defineContent = ws+ notnl+\n\n    DefineLongStatement = \"!definelong\" identifier Arguments? Statement* \"!enddefinelong\"\n\n    ReturnStatement = \"!return\" expression\n\n    IfStatement = \"!if\" expression Statement*  ElseBlock? endToken<\"if\">\n    ElseBlock =\n      | \"!elseif\" expression Statement* ElseBlock* -- elseif\n      | \"!else\" Statement*  -- else\n\n    WhileStatement = \"!while\" expression Statement* endToken<\"while\">\n\n    ThemeStatement = \"!theme\" letter+\n    // TODO\n    UnknownStatement = \"!\" (\"log\" | \"assert\" | \"themes\" | \"dump_memory\" | \"import\") #notnl*\n\n    UMLSpriteStatement = \n      | \"sprite\" identifier Svg --svg\n      | \"sprite\" identifier spriteSpec? \"{\" spriteLine+  \"}\" --block\n      | \"sprite\" identifier spriteSpec? spriteLine --inline\n    spriteSpec = \"[\" spriteChar+ \"]\"\n    spriteLine = spriteChar+\n    spriteChar = ~(\"{\" | \"}\" | \"[\" | \"]\" | \"<\" | \">\" | nl ) any\n\n    Svg = \"<svg\" tagC* \">\" tag+ \"</svg>\"\n    tag = ~(\"</svg>\") \"<\" tagC+ \">\" \n    tagC = ~(\"<\" | \">\") any\n\n    umlStatement = ~(\"!\" any+)  notnl+ &le\n    umlLine = ~(\"!\" any+)  notnl+ &le\n\n    ExpressionStatement =\n     | #callExpression\n\n    expression =\n      | binaryExpression\n      | callExpression\n      | parenthesizedExpression\n      | numberLiteral\n      | stringLiteral\n      | identifier\n\n    callExpression = (\"%\" | \"!\")? identifier \"(\" applySyntactic<ListOf<expression,\",\">> \")\"\n\n    binaryExpression =\n      | expression wsAroundOptional<binaryOperatorToken> expression\n\n    parenthesizedExpression = \"(\" wsAroundOptional<expression> \")\"\n\n    binaryOperatorToken =\n      | \"!=\"\n      | \">=\"\n      | \">\"\n      | \"<=\"\n      | \"<\"\n      | \"&&\"\n      | \"||\"\n      | \"==\"\n      | \"+\"\n      | \"-\"\n      | \"*\"\n      | \"/\"\n\n    numberLiteral = (digit | \".\")+\n\n    stringLiteral =\n      | \"\\\"\" stringLiteralDbChar* \"\\\"\"\n      | \"'\"  stringLiteralSgChar* \"'\"\n    stringLiteralDbChar = ~(nl | \"\\\"\") any\n    stringLiteralSgChar = ~(nl | \"\\'\") any\n\n    identifier =\n      | \"$\" (letter | digit | \"_\")* -- dolor\n      | (letter | \"_\") (letter | digit | \"_\")*  -- letter\n\n    wsAroundOptional<x> = ws* x ws*\n\n    // line end\n    le =\n      | ws* end\n      | ws* nl\n\n    // whitespace\n    ws =\n      | \" \"\n      | \"\\t\"\n\n    notnl = ~nl any\n\n    // new line\n    nl =\n      | \"\\n\"\n      | \"\\r\"\n      | \"\\u2028\"\n      | \"\\u2029\"\n  }\n`;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ohm_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].grammar(def));\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/parser/grammar.ts?");

/***/ }),

/***/ "./src/parser/parser.ts":
/*!******************************!*\
  !*** ./src/parser/parser.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parse\": () => (/* binding */ parse),\n/* harmony export */   \"traverse\": () => (/* binding */ traverse)\n/* harmony export */ });\n/* harmony import */ var _grammar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./grammar */ \"./src/parser/grammar.ts\");\n/* harmony import */ var _semantics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./semantics */ \"./src/parser/semantics.ts\");\n\n\n// import * as fs from 'fs';\nfunction parse(input) {\n    // const t = grammar.trace(input).toString();\n    // console.log(t);\n    // fs.writeFileSync('a.txt', t);\n    const match = _grammar__WEBPACK_IMPORTED_MODULE_0__[\"default\"].match(input);\n    // console.log(match.message);\n    const ast = (0,_semantics__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(match).toTree();\n    // console.log(JSON.stringify(ast, null, 2));\n    return ast;\n}\nfunction traverse(ast, iter) {\n    Object.entries(ast).forEach(([key, value]) => {\n        if (key === 'type' && iter[value]) {\n            iter[value](ast);\n        }\n        if (Array.isArray(value)) {\n            value.forEach((child) => traverse(child, iter));\n        }\n        else if (typeof value === 'object') {\n            traverse(value, iter);\n        }\n    });\n}\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/parser/parser.ts?");

/***/ }),

/***/ "./src/parser/semantics.ts":
/*!*********************************!*\
  !*** ./src/parser/semantics.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _grammar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./grammar */ \"./src/parser/grammar.ts\");\n\nconst semantics = _grammar__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createSemantics();\nfunction getPos(node) {\n    return {\n        start: node.source.startIdx,\n        end: node.source.endIdx,\n    };\n}\nsemantics.addOperation('toTree', {\n    _terminal() {\n        return this.sourceString;\n    },\n    Root(root) {\n        return {\n            type: 'Root',\n            children: root.children.map((child) => child.toTree()),\n            sourceString: this.sourceString,\n            pos: getPos(this),\n        };\n    },\n    expression(expression) {\n        return expression.toTree();\n    },\n    variableDeclaration(_1, _g, identifier, _3, expression, _5) {\n        var _a;\n        const ctorName = (_a = _g.child(0)) === null || _a === void 0 ? void 0 : _a.ctorName;\n        const scope = ctorName === 'globalVar'\n            ? 'global'\n            : ctorName === 'localVar'\n                ? 'local'\n                : undefined;\n        return {\n            type: 'VariableDeclaration',\n            init: expression.toTree(),\n            name: identifier.toTree(),\n            pos: getPos(this),\n            scope: scope,\n        };\n    },\n    IncludeStatement(_i, path, subpart) {\n        var _a, _b;\n        const isStd = path.child(0).ctorName === 'includePath_std';\n        const [_1, _2] = path.child(0).children;\n        return {\n            type: 'IncludeStatement',\n            token: _i.sourceString.slice(1),\n            path: isStd ? _2.sourceString : _1.sourceString,\n            pos: getPos(this),\n            std: isStd,\n            subpart: (_b = (_a = subpart.child(0)) === null || _a === void 0 ? void 0 : _a.child(1)) === null || _b === void 0 ? void 0 : _b.sourceString,\n        };\n    },\n    InlineFunctionDeclaration(_, name, args, _return, expression, _le) {\n        var _a, _b;\n        return {\n            name: name.toTree(),\n            unquoted: ((_a = _.child(0)) === null || _a === void 0 ? void 0 : _a.ctorName) === 'functionStart_unquoted' || undefined,\n            type: 'InlineFunctionDeclaration',\n            pos: getPos(this),\n            return: expression.toTree(),\n            arguments: ((_b = args.child(0)) === null || _b === void 0 ? void 0 : _b.toTree()) || [],\n        };\n    },\n    FunctionDeclaration(_, name, args, statements, _7) {\n        var _a, _b;\n        return {\n            name: name.toTree(),\n            unquoted: ((_a = _.child(0)) === null || _a === void 0 ? void 0 : _a.ctorName) === 'functionStart_unquoted' || undefined,\n            type: 'FunctionDeclaration',\n            pos: getPos(this),\n            statements: statements.children.map((child) => child.toTree()),\n            arguments: ((_b = args.child(0)) === null || _b === void 0 ? void 0 : _b.toTree()) || [],\n        };\n    },\n    ProcedureDeclaration(_, name, args, statements, _7) {\n        var _a, _b;\n        return {\n            name: name.toTree(),\n            unquoted: ((_a = _.child(0)) === null || _a === void 0 ? void 0 : _a.ctorName) === 'functionStart_unquoted' || undefined,\n            type: 'ProcedureDeclaration',\n            pos: getPos(this),\n            statements: statements.children.map((child) => child.toTree()),\n            arguments: ((_b = args.child(0)) === null || _b === void 0 ? void 0 : _b.toTree()) || [],\n        };\n    },\n    DefineStatement(_1, name, args, content) {\n        var _a;\n        return {\n            type: 'DefineStatement',\n            name: name.toTree(),\n            arguments: (_a = args.child(0)) === null || _a === void 0 ? void 0 : _a.toTree(),\n            content: content.child(1).sourceString,\n            pos: getPos(this),\n        };\n    },\n    DefineLongStatement(_1, name, args, statements, _3) {\n        var _a;\n        return {\n            type: 'DefineLongStatement',\n            name: name.toTree(),\n            arguments: (_a = args.child(0)) === null || _a === void 0 ? void 0 : _a.toTree(),\n            statements: statements.children.map((child) => child.toTree()),\n            pos: getPos(this),\n        };\n    },\n    Arguments(_, args, _3) {\n        var _a;\n        return ((_a = args.child(0)) === null || _a === void 0 ? void 0 : _a.asIteration().toTree()) || [];\n    },\n    Argument(id, _, init) {\n        var _a;\n        return {\n            type: 'Argument',\n            name: id.toTree(),\n            pos: getPos(this),\n            init: (_a = init.child(0)) === null || _a === void 0 ? void 0 : _a.toTree(),\n        };\n    },\n    IfStatement(_1, expression, then, elseif, _) {\n        return {\n            type: 'IfStatement',\n            expression: expression.toTree(),\n            then: then.toTree(),\n            else: elseif.toTree(),\n            pos: getPos(this),\n        };\n    },\n    WhileStatement(_start, expression, statements, _end) {\n        return {\n            type: 'WhileStatement',\n            expression: expression.toTree(),\n            statements: statements.children.map((child) => child.toTree()),\n            pos: getPos(this),\n        };\n    },\n    ElseBlock_elseif(_1, expression, then, elseif) {\n        return {\n            type: 'IfStatement',\n            expression: expression.toTree(),\n            then: then.toTree(),\n            else: elseif.toTree(),\n            pos: getPos(this),\n        };\n    },\n    ElseBlock_else(_, statements) {\n        return statements.children.map((child) => child.toTree());\n    },\n    ReturnStatement(_, expression) {\n        return {\n            type: 'ReturnStatement',\n            expression: expression.toTree(),\n            pos: getPos(this),\n        };\n    },\n    ExpressionStatement(expression) {\n        return {\n            type: 'ExpressionStatement',\n            expression: expression.toTree(),\n            pos: getPos(expression),\n        };\n    },\n    ThemeStatement(_1, _2) {\n        return {\n            type: 'ThemeStatement',\n            theme: _2.sourceString,\n            pos: getPos(this),\n        };\n    },\n    UnknownStatement(_1, _2, _3) {\n        return {\n            type: 'UnknownStatement',\n            text: this.sourceString,\n            pos: getPos(this),\n        };\n    },\n    UMLSpriteStatement_block(_1, identifier, spec, _4, _5, _6) {\n        return {\n            type: 'UMLSpriteStatement',\n            name: identifier.toTree(),\n            spec: spec.child(0) ? spec.child(0).child(1).sourceString : undefined,\n            pos: getPos(this)\n        };\n    },\n    UMLSpriteStatement_svg(_1, identifier, _3) {\n        return {\n            type: 'UMLSpriteStatement',\n            name: identifier.toTree(),\n            // spec: spec.sourceString,\n            pos: getPos(this)\n        };\n    },\n    UMLSpriteStatement_inline(_1, identifier, spec, _4) {\n        return {\n            type: 'UMLSpriteStatement',\n            name: identifier.toTree(),\n            spec: spec.child(0) ? spec.child(0).child(1).sourceString : undefined,\n            pos: getPos(this)\n        };\n    },\n    umlStatement(uml, _) {\n        return {\n            type: 'UmlText',\n            text: uml.sourceString,\n            pos: getPos(uml),\n        };\n    },\n    binaryExpression(left, token, right) {\n        return {\n            type: 'BinaryExpression',\n            left: left.toTree(),\n            operator: token.toTree(),\n            pos: getPos(this),\n            right: right.toTree(),\n        };\n    },\n    binaryOperatorToken(token) {\n        return {\n            type: 'BinaryOperatorToken',\n            kind: token.sourceString.trim(),\n            pos: getPos(token),\n        };\n    },\n    callExpression(lead, name, _open, args, _close) {\n        return {\n            type: 'CallExpression',\n            name: name.toTree(),\n            buildIn: lead.sourceString === '%' || undefined,\n            args: args.asIteration().toTree(),\n            pos: getPos(this),\n        };\n    },\n    parenthesizedExpression(_1, expression, _3) {\n        return {\n            type: 'ParenthesizedExpression',\n            expression: expression.toTree(),\n            pos: getPos(this),\n        };\n    },\n    stringLiteral(_1, chars, _2) {\n        return {\n            type: 'StringLiteral',\n            text: chars.sourceString,\n            pos: getPos(this),\n        };\n    },\n    numberLiteral(chars) {\n        return {\n            type: 'NumberLiteral',\n            text: chars.sourceString,\n            pos: getPos(this),\n        };\n    },\n    identifier(id) {\n        return {\n            type: 'Identifier',\n            name: id.sourceString,\n            pos: getPos(this),\n        };\n    },\n    wsAroundOptional(_1, x, _2) {\n        return x.toTree();\n    },\n    _iter(...children) {\n        return children.map((c) => {\n            return c.toTree();\n        });\n    },\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (semantics);\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/parser/semantics.ts?");

/***/ }),

/***/ "./src/service/PUmlFile.ts":
/*!*********************************!*\
  !*** ./src/service/PUmlFile.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _parser_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/parser */ \"./src/parser/parser.ts\");\n/* harmony import */ var _fetcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fetcher */ \"./src/service/fetcher.ts\");\n/* harmony import */ var _stdlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stdlib */ \"./src/service/stdlib.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nclass PUmlFile {\n    static create(content, url) {\n        if (!url) {\n            return new PUmlFile(content);\n        }\n        if (!this.cache[url]) {\n            this.cache[url] = new PUmlFile(content, url);\n        }\n        return this.cache[url];\n    }\n    static fetchOrCreate(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.cache[url]) {\n                return this.cache[url];\n            }\n            const content = yield (0,_fetcher__WEBPACK_IMPORTED_MODULE_1__.getJson)(url)\n                .then((body) => body.content);\n            return PUmlFile.create(atob(content), url);\n        });\n    }\n    constructor(content, url) {\n        this.includes = {};\n        this.globalVariables = [];\n        this.localVariables = [];\n        this.callableNodes = [];\n        try {\n            this.ast = (0,_parser_parser__WEBPACK_IMPORTED_MODULE_0__.parse)(content);\n            this.url = url || \"\";\n        }\n        catch (err) {\n            console.error(err, content);\n            throw err;\n        }\n    }\n    allCallableNodes() {\n        const nodes = [...this.callableNodes];\n        for (const include of Object.values(this.includes)) {\n            nodes.push(...include.allCallableNodes());\n        }\n        return nodes;\n    }\n    allGlobalVariableNodes() {\n        const nodes = [...this.globalVariables];\n        for (const include of Object.values(this.includes)) {\n            nodes.push(...include.allGlobalVariableNodes());\n        }\n        return nodes;\n    }\n    findCallableNode(callableName) {\n        let node = this.callableNodes.find((n) => n.name.name === callableName);\n        if (node) {\n            return node;\n        }\n        for (const include of Object.values(this.includes)) {\n            node = include.findCallableNode(callableName);\n            if (node) {\n                return node;\n            }\n        }\n        return node;\n    }\n    findArguments(callableName) {\n        const callable = this.findCallableNode(callableName);\n        return (callable === null || callable === void 0 ? void 0 : callable.arguments) || [];\n    }\n    localSymbols() {\n        const symbols = this.localVariables.map((n) => n.name.name);\n        (0,_parser_parser__WEBPACK_IMPORTED_MODULE_0__.traverse)(this.ast, {\n            CallExpression: (node) => {\n                node.args.forEach((arg) => {\n                    if (arg.type === \"Identifier\") {\n                        symbols.push(arg.name);\n                    }\n                });\n            },\n        });\n        return symbols;\n    }\n    findSpriteSymbols() {\n        const symbols = new Set();\n        this.traverseNodes({\n            UMLSpriteStatement: (node) => {\n                const name = node.name.name;\n                symbols.add(name);\n            },\n        });\n        return [...symbols].map((symbol) => symbol.replace(/^\\$/, \"\"));\n    }\n    traverseNodes(iter) {\n        (0,_parser_parser__WEBPACK_IMPORTED_MODULE_0__.traverse)(this.ast, iter);\n        Object.values(this.includes).forEach((file) => file.traverseNodes(iter));\n    }\n    parse() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _stdlib__WEBPACK_IMPORTED_MODULE_2__[\"default\"].resolve();\n            if (this.callableNodes.length || this.globalVariables.length) {\n                return;\n            }\n            const includes = [];\n            (0,_parser_parser__WEBPACK_IMPORTED_MODULE_0__.traverse)(this.ast, {\n                VariableDeclaration: (node) => {\n                    if (node.scope === \"global\") {\n                        this.globalVariables.push(node);\n                    }\n                    else {\n                        this.localVariables.push(node);\n                    }\n                },\n                FunctionDeclaration: (node) => {\n                    this.callableNodes.push(node);\n                },\n                InlineFunctionDeclaration: (node) => {\n                    this.callableNodes.push(node);\n                },\n                ProcedureDeclaration: (node) => {\n                    this.callableNodes.push(node);\n                },\n                IncludeStatement: (node) => {\n                    includes.push(node);\n                },\n                DefineStatement: (node) => {\n                    if (node.arguments) {\n                        this.callableNodes.push(node);\n                    }\n                    else {\n                        this.globalVariables.push(node);\n                    }\n                },\n                DefineLongStatement: (node) => {\n                    if (node.arguments) {\n                        this.callableNodes.push(node);\n                    }\n                    else {\n                        this.globalVariables.push(node);\n                    }\n                },\n            });\n            for (const inc of includes) {\n                let fullurl = inc.path;\n                if (inc.std) {\n                    fullurl = (_a = _stdlib__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getModule(inc.path)) === null || _a === void 0 ? void 0 : _a.url;\n                    if (!fullurl) {\n                        continue;\n                    }\n                }\n                else if (!/https?:/.test(fullurl)) {\n                    fullurl = new URL(inc.path, this.url).toString();\n                }\n                if (!this.includes[fullurl]) {\n                    this.includes[fullurl] = yield PUmlFile.fetchOrCreate(fullurl);\n                    yield this.includes[fullurl].parse();\n                }\n            }\n        });\n    }\n}\nPUmlFile.cache = {};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PUmlFile);\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/service/PUmlFile.ts?");

/***/ }),

/***/ "./src/service/constants.ts":
/*!**********************************!*\
  !*** ./src/service/constants.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_EXPIRES\": () => (/* binding */ DEFAULT_EXPIRES)\n/* harmony export */ });\n// cache 7 days\nconst DEFAULT_EXPIRES = 7 * 24 * 60 * 60 * 1000;\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/service/constants.ts?");

/***/ }),

/***/ "./src/service/db.ts":
/*!***************************!*\
  !*** ./src/service/db.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ \"./node_modules/dexie/dist/modern/dexie.mjs\");\n\nclass PUMLDB extends dexie__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super(\"PUML_DB\");\n        this.version(1).stores({\n            files: \"++id,&url,content,updatedAt\",\n        });\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new PUMLDB());\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/service/db.ts?");

/***/ }),

/***/ "./src/service/fetcher.ts":
/*!********************************!*\
  !*** ./src/service/fetcher.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getJson\": () => (/* binding */ getJson)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/service/constants.ts\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./db */ \"./src/service/db.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nfunction fetchJson(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const res = yield fetch(url);\n        const json = yield res.json();\n        if (res.status >= 300) {\n            throw new Error(JSON.stringify(json));\n        }\n        return json;\n    });\n}\nfunction updateCache(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const content = yield fetchJson(url);\n        const id = yield _db__WEBPACK_IMPORTED_MODULE_1__[\"default\"].files.add({\n            content: JSON.stringify(content),\n            updatedAt: Date.now(),\n            url,\n        });\n        return {\n            id,\n            content: JSON.stringify(content),\n            updatedAt: Date.now(),\n            url,\n        };\n    });\n}\nfunction getCacheOrFetch(url, expires) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const file = yield _db__WEBPACK_IMPORTED_MODULE_1__[\"default\"].files.get({ url });\n            if (file) {\n                if (file.updatedAt + expires < Date.now()) {\n                    updateCache(url);\n                }\n                return file;\n            }\n        }\n        catch (err) {\n            // ignore\n        }\n        return yield updateCache(url);\n    });\n}\nconst getJson = (url, expires = _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_EXPIRES) => __awaiter(void 0, void 0, void 0, function* () {\n    const file = yield getCacheOrFetch(url, expires);\n    if (file) {\n        return JSON.parse(file.content);\n    }\n    return null;\n});\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/service/fetcher.ts?");

/***/ }),

/***/ "./src/service/index.ts":
/*!******************************!*\
  !*** ./src/service/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PUmlService\": () => (/* binding */ PUmlService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _PUmlFile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PUmlFile */ \"./src/service/PUmlFile.ts\");\n/* harmony import */ var _stdlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stdlib */ \"./src/service/stdlib.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n_stdlib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].resolve();\nclass PUmlService {\n    /**\n     * 所有可调用函数\n     */\n    callableSymbols(puml) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const file = new _PUmlFile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](puml);\n            yield file.parse();\n            return file.allCallableNodes().map((node) => node.name.name);\n        });\n    }\n    /**\n     * 函数参数\n     */\n    findCallableNode(puml, callableName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const file = new _PUmlFile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](puml);\n            yield file.parse();\n            return file.findCallableNode(callableName);\n        });\n    }\n    variableSymbols(puml) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const file = new _PUmlFile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](puml);\n            yield file.parse();\n            return file\n                .allGlobalVariableNodes()\n                .map((node) => node.name.name)\n                .concat(file.localVariables.map((v) => v.name.name));\n        });\n    }\n    localSymbols(puml) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const file = new _PUmlFile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](puml);\n            yield file.parse();\n            return file.localSymbols();\n        });\n    }\n    findSpriteSymbols(puml) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const file = new _PUmlFile__WEBPACK_IMPORTED_MODULE_0__[\"default\"](puml);\n            yield file.parse();\n            return file.findSpriteSymbols();\n        });\n    }\n    stdModules() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _stdlib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].resolve();\n            return _stdlib__WEBPACK_IMPORTED_MODULE_1__[\"default\"].modules.filter((m) => /\\.puml$/.test(m.path) || m.type === \"tree\")\n                .map((m) => m.path.replace(/\\.puml$/, \"\"));\n        });\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new PUmlService());\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/service/index.ts?");

/***/ }),

/***/ "./src/service/stdlib.ts":
/*!*******************************!*\
  !*** ./src/service/stdlib.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fetcher */ \"./src/service/fetcher.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass Stdlib {\n    constructor() {\n        this.modules = [];\n        this.loading = false;\n        this.resolves = [];\n    }\n    getModule(name) {\n        return this.modules.find((module) => module.path === name || module.path === name + \".puml\");\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.modules.length) {\n                return this.modules;\n            }\n            if (this.loading) {\n                return new Promise((resolve) => this.resolves.push(resolve));\n            }\n            this.loading = true;\n            return (0,_fetcher__WEBPACK_IMPORTED_MODULE_0__.getJson)(\"https://api.github.com/repos/plantuml/plantuml-stdlib/git/trees/master?recursive=10\")\n                .then((body) => {\n                if (body === null || body === void 0 ? void 0 : body.tree) {\n                    this.modules = body.tree;\n                }\n                return this.modules;\n            })\n                .finally(() => {\n                this.resolves.forEach((resolve) => resolve(this.modules));\n                this.resolves = [];\n                this.loading = false;\n            });\n        });\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Stdlib());\n\n\n//# sourceURL=webpack://@sinm/monaco-plantuml/./src/service/stdlib.ts?");

/***/ })

}]);